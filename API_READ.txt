Це документація для взаємодії з базою данних QR_MENU

Для того щоб почати працювати з сервером потрібно закинути всі ваші html
шаблони до папки /static/templates в поточній директорії та встановити python на ваш компьютер
як встановити його можете глянути в YouTube

Далі щоб працювали всі ваші шаблони стилізації для шаблонів потрібно закинути всі файли css,
js і т.д до папки /static/ всередині вже самі робите иерархію ваших файлів та папок.

Після відкрити термінал та впевнетись що ви знаходитесь в папці QR-menu та написати таку команду 'pip install -r requirements.txt'

Також потрібно налаштувати мрашрутизацію щоб сервер міг знаходити ваші шаблони, для цього вам
потрібно зайти в app.py та додати такий код:



@app.route('your/example/path')
    return render_template('your_template.html')


І так з кожним шаблоном html

url: ../api/authentication
    Цей метод працює тільки з POST запитом та має певну структуру body для того щоб успішно виконати регистрацію користувача - приклад запиту:

    fetch('/api/authentication', {
            'method' : 'POST',
            'headers' : {'Content-type' : 'application/json'},
            'body' : JSON.stringify({
                'username': 'user_name',
                'email' : 'user_email',
                'password' : 'user_password',
                'restaurant' : 'name_restautant'
            })
            
        })
        .then(data => data.json())

Всі перевірки на правильність вводу Ім'я, Фамілії, Номеру та емейлу виконуються на стороні серверу
тому не потрібно думати про те чи правильно вів данні користувач, якщо дані не коректні повернеться
обьєкт з статус кодом 400:

    якщо користувач з таким іменем присутній
        'status': 400,
        'from': 'user exists'
        'msg' : 'Користувач з данним ім\'ям вже існує'

    якщо користувач з таким емейлом присутній
        'status': 400,
        'from': 'email exists',
        'msg' : 'Користувач з данною поштою вже існує',

    якщо неправильний формат пошти
        'status': 400,
        'from': 'email',
        'msg' : 'Неправильний формат електроної пошти, пошта не має містити . в початку та кінці, може містити тільки один символ @ та не має містити : ; < > -',

    якщо неправильний формат паролю
        'status': 400,
        'from': 'password',
        'msg' : 'Пароль повинен складатись з 8 симовлів, мати тільки букви латинського алфавіту, цифри та хоча б один спеціальний символ _ або . без пробілів',

    якщо неправильний формат імені
        'status': 400,
        'from': 'name',
        'msg' : "Ім'я користувача повинно складатись з 8 символів та містити тільки букви латинського алфавіту, цифри та _ підкреслення",

якщо помилка виникає на стороні серверу тоді повертається код 500,
або якщо у вас в запиті неправильна реализація методу тоді повернеться код 405.

Якщо не сталось ніяких помилок відповідь від серверу буде виглядати таким чином:

    Object: {
        hash_key:"ec9b6a989e3bd6329f11b7091c75d597fc077ba633cee8823cee1f0c610ba1"
        msg: "Authentication succesful"
        status: 200
    }

hash_key потрібно буде зберегти в локальному сховищі браузеру корситувача
по ньому ви будете отримувати данні про самого користувача, ресторан
та категорії ресторану

url: ../api/login

    mathod: 'loginUser'

        fetch('/api/login', {
            'method' : 'POST',
            'headers' : {'Content-type' : 'application/json'},
            'body' : JSON.stringify({
                'method' : 'loginUser',
                'key': 'hash_user_key'
            })
            
        })
        .then(data => data.json())

        Метод loginUser для автоматичного логування в систему якщо 
        ключ присутній в локальному сховищі.

        Повертається:
        {
            data: 
                email: "example@gmail.com"
                hashf: "hash_user_key"
                id: 'user_id'
                username: user_name
        }

        якщо ключ хибний тоді повертається код 400: 'USER NOT EXISTS'

    method: 'authUser'

        якщо відсутній ключ користувача тоді присутній цей метод

        fetch('/api/login', {
         'method' : 'POST',
         'headers' : {'Content-type' : 'application/json'},
         'body' : JSON.stringify({
                'method' : 'authUser',
                'password': 'user_password',
                'email': 'example@gmail.com'
            })
         
        })
        .then(data => data.json())

        Якщо код 200 повернеться:
        
        {
            data: 
                email: "example@gmail.com"
                hashf: "hash_user_key"
                id: 'user_id'
                username: user_name
        }

        якщо неправильний пароль або пошта повертаєтсья код 400 з повідомленням
        про неправильне поле

        'status': 400,
        'msg' : тут буде повідомлення про помилку, 


url ../api/category

